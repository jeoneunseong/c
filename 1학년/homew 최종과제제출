#include <stdio.h>
#include <string.h>
#define WORD 16

void getBinary(char bin[], char str[], int n);
void complement2(char bin[], int n);
int bin2dec(const char bin[], int n);

void getBinary(char bin[], char str[], int n) {
    int len = strlen(str);

    for (int i = 0; i < n; i++) {
        bin[i] = '0';
    }

    for (int i = 0; i < len; i++) {
        bin[n - len + i] = str[i];
    }

    bin[n] = '\0';
}

void complement2(char bin[], int n) {
    int carry = 1;
    for (int i = 0; i < n; i++) {
        bin[i] = (bin[i] == '1') ? '0' : '1';
    }
    for (int i = n - 1; i >= 0; i--) {
        if (bin[i] == '1' && carry) {
            bin[i] = '0';
        } else if (carry) {
            bin[i] = '1';
            carry = 0;
        }
    }
}

int bin2dec(const char bin[], int n) {
    int isNegative = (bin[0] == '1');
    int value = 0;

    if (isNegative) {
        for (int i = 0; i < n; i++) {
            value = value * 2 + (bin[i] == '1' ? 1 : 0);
        }
        value -= (1 << n);
    } else {
        for (int i = 0; i < n; i++) {
            value = value * 2 + (bin[i] - '0');
        }
    }

    return value;
}

int main() {
    char input1[100];
    char input2[100];
    char op[10];

    char binary1[WORD + 1] = {0};
    char binary2[WORD + 1] = {0};

    int result;
    int num1, num2;

    printf("<<<<input>>>>>>\n");
    fgets(input1, sizeof(input1), stdin);
    fgets(op, sizeof(op), stdin);
    fgets(input2, sizeof(input2), stdin);

    input1[strcspn(input1, "\n")] = '\0';
    op[strcspn(op, "\n")] = '\0';
    input2[strcspn(input2, "\n")] = '\0';

    getBinary(binary1, input1, WORD);
    getBinary(binary2, input2, WORD);

    num1 = bin2dec(binary1, WORD);
    num2 = bin2dec(binary2, WORD);

    switch (op[0]) {
        case '+': result = num1 + num2; break;
        case '-': result = num1 - num2; break;
        case '*': result = num1 * num2; break;
        case '/': result = num1 / num2; break;
        case '%': result = num1 % num2; break;
        default:
            printf("bad operator...\n");
            return 1;
    }

    printf("%s(%d) %c %s(%d) = %d\n", binary1, num1, op[0], binary2, num2, result);
    return 0;
}
