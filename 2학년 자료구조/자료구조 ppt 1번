데이터를 조직하고 저장하는 방법

논리적 구조 
1. 순서대로 데이터에 접근한다.
2. 먼저 저장된 데이터를 나중에 꺼낸다.
3. 계층적 관계로 표현한다.
4. 복잡한 관계를 표현한다.

물리적 구현
1. 메모리의 연속된 공간에 저장한다.
2. 메모리의 임의의 위치에 저장한다.
3. 별도의 인덱스와 데이터를 구분해서 저장한다.
4. 특정 메모리 주소에 저장한다.

논리적 구조의 선형구조 vs 비선형 구조

선형구조 : 순차적으로 나열
배열(Array), 연결리스트(Linked List), 스텍(Stack), 큐(Queue)

비선형 구조 : 계층적, 네트워크적으로 구성 
트리(Tree), 그래프(Graph), 힙(Heap)

선형구조-배열 
: 동일한 데이터타입 요소를 연속된 순서대로 저장
- 고정된 크기의 데이터 관리(인덱스 순서)
- 조회가 많을 때, 추가 및 삭제가 적을 때 활용
- 2차원 이상의 배열을 통한 행렬, 텐서 계산

* 저장방식 
: 메모리의 연속된 주소공간에 저장
중간 삽입, 삭제 시 데이터 이동 - 비효율

선형구조-스텍
: LIFO 방식으로 처리
- 마지막 추가 데이터가 가장 먼저 처리(제거)됨
- 함수 호출 시 복귀주소 저장
- Undo 기능 구현 등

* 저장방식
: 연속된 공간(배열)사용(크기고정)
연결리스트 사용(가변크기)

비선형구조-트리
: 데이터 간의 관계 표현
노드(정점)와 에지(간선)로 구성된다.
부모노드와 자식노드 관계 형성
데이터베이스 인덱싱, 파일처리등

* 저장방식
배열저장 : 완전이진트리
연결리스트 사용

비선형구조 - 그래프
: 데이터의 계층적 관계 표현
노드(정점)와 에지(간선)로 구성된다.
노드 간 관계가 다양하며, 방향성, 가중치를 가질 수 있음
친구관계, 팔로우 관계, 경로탐색, 네트워크 형상 표현 등

* 저장방식 
: 연결리스트
인접행렬 등


선택한 자료구조에 따른 알고리즘의 변화

학생의 성적처리를 위한 자료를 구성하고 저장 형식을 지정한다.

배열 : 고정된 크기, 인덱스를 통해 접근함 -> 추가, 삽입, 삭제의 어려움, 빠른 검색
연결리스트 : 성적데이터 노드 저장, 다음 노드와 연결 -> 크기조정, 삽입 삭제 효율적, 검색 및 탐색 시간 소요
해시 테이블 : Key, Value 쌍으로 저장, 해시 함수 사용 빠른 접근 -> 검색, 삽입, 삭제 효율적, 충돌관리ㅡ 메모리 증대

















